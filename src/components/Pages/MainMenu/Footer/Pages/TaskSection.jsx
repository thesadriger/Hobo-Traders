// src/components/Pages/MainMenu/Footer/Pages/TaskSection.jsx
import React, { useState, useRef, useLayoutEffect, useEffect, useMemo } from 'react';
import { Button, Spin, Card, message } from 'antd';
import styled, { keyframes, css } from 'styled-components';
import { useDispatch, useSelector } from 'react-redux';
import { increaseFood, increaseFun, increaseHealth, decreaseFun, decreaseFood, decreaseHealth, resetIndicators, increaseZeroStep, resetZeroStep } from '@/store/slices/indicatorsSlice';
import { decreaseUSDT, decreaseBTC, decreaseHBTRD} from '@/store/slices/balanceSlice'; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
import { increaseLevel, setJustUnlockedTaskKey, resetLevel } from '@/store/slices/levelSlice';
import { PlusOutlined, LockOutlined } from '@ant-design/icons';
import { FaStar } from 'react-icons/fa';
import ActionButton from '@/components/Pages/Elements/ActionButton';
import Lottie from 'lottie-react';
import foodAnimation from '/src/assets/animation_json/food.json';
import funAnimation from '/src/assets/animation_json/fun.json';
import heartAnimation from '/src/assets/animation_json/heart.json';
import starAnimation from '@/assets/animation_json/star.json';
import { setLastChangedIndicator } from '@/store/slices/lastChangedIndicatorSlice';
import { useLocation } from 'react-router-dom';
import TaskSectionContainer, {
  IconContainer,
  TaskInfo,
  SubContainer,
  ActionInfo,
  CircleIcon,
  AnotherIconContainer,
  TaskTitle,
  TaskTitleWrapper,
  formatBalance
} from './TaskSectionContainer';
import { selectComponent } from '@/store/slices/editModeSlice';
import ModalColorPicker from './ModalColorPicker';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ —ç–º–æ–¥–∑–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∑–∞–¥–∞–Ω–∏—è
export const getTaskEmoji = (title) => {
  const lower = title.toLowerCase();
  // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º —Ç–æ—á–Ω—ã–µ —Ñ—Ä–∞–∑—ã
  if (lower.includes('–ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–µ—Ä')) return 'ü•ã';
  if (lower.includes('–ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –≤—Ä–∞—á')) return 'üë®üèª‚Äç‚öïÔ∏è';
  if (lower.includes('–≥–æ–ª—É–±')) return 'üïäÔ∏è';
  if (lower.includes('–ø–æ–º–æ–π')) return 'üóëÔ∏è';
  if (lower.includes('—à–∞—É—Ä–º')) return 'üåØ';
  if (lower.includes('—Ä–µ—Å—Ç–∏–∫')) return 'üçΩÔ∏è';
  if (lower.includes('–æ—Å–Ω–æ–≤–∞—Ç—å')) return 'üìä';
  if (lower.includes('—Ä–µ—Å—Ç–æ—Ä–∞–Ω')) return 'üè£';
  if (lower.includes('–ø–∞–±')) return 'üçª';
  if (lower.includes('–∫–∞—Ñ–µ')) return '‚òï';
  if (lower.includes('–µ–¥–∞') || lower.includes('–ø–æ–∂—Ä–∞—Ç—å') || lower.includes('–µ—Å—Ç—å') || lower.includes('food')) return 'üçó';
  if (lower.includes('–ø–µ–ª—å–º–µ–Ω')) return 'ü•ü';
  if (lower.includes('–∏—Å–∫–∞—Ç—å')) return 'ü•°';
  if (lower.includes('–ø—Ä–æ—Å—Ä–æ—á')) return 'ü•´';
  if (lower.includes('—Ç–æ—á–∫')) return 'üçî';
  if (lower.includes('–∑–∞–∫–∞–∑–∞—Ç—å')) return 'üç≤';
  if (lower.includes('–∂–µ–Ω–∏—Ç—å—Å—è')) return 'üíí';
  if (lower.includes('–ø–æ–≤–∞—Ä')) return 'üë®‚Äçüç≥';
  if (lower.includes('–≤–µ—Å–µ–ª—å')) return 'üéâ';
  if (lower.includes('—Ñ–µ–π–µ—Ä–≤–µ—Ä–∫')) return 'üéá';
  if (lower.includes('–ø—É–∫')) return 'üí®';
  if (lower.includes('—Ä—ã–≥')) return 'ü§Æ';
  if (lower.includes('—É–Ω–∏—Ç–∞–∑')) return 'üöΩ';
  if (lower.includes('–ø–∞–º—è—Ç–Ω–∏–∫')) return 'ü™¶';
  if (lower.includes('–ø–∏–≤–∞—Å') || lower.includes('–ø–∏–≤–æ')) return 'üç∫';
  if (lower.includes('–≤–æ–¥–∫')) return 'ü•õ';
  if (lower.includes('–≤–∏—Å–∫–∞—Ä')) return 'ü•É';
  if (lower.includes('–∫–∏–Ω–æ')) return 'üé¨';
  if (lower.includes('–¥—Ä–∞–∫')) return 'ü•ä';
  if (lower.includes('–¥–µ–≤—É—à')) return 'üëØ‚Äç‚ôÄÔ∏è';
  if (lower.includes('–±–∏–±–µ—Ä')) return 'üé§';
  if (lower.includes('–∞–∫—Ç–µ—Ä')) return 'üé≠';
  if (lower.includes('—à–∞–º–ø–∞–Ω—Å–∫')) return 'üçæ';
  if (lower.includes('—Å–æ–Ω') || lower.includes('–ø–æ—Å–ø–∞—Ç—å')) return 'üí§';
  if (lower.includes('—Å–ø–æ—Ä—Ç')) return 'ü§∏‚Äç‚ôÇÔ∏è';
  if (lower.includes('—Ç—Ä–∞–≤')) return 'üåø';
  if (lower.includes('–ø—Ä–æ–±–µ–∂–∫')) return 'üèÉ‚Äç‚ôÇÔ∏è';
  if (lower.includes('—Ç—É—Ä–Ω–∏–∫')) return 'üí™üèº';
  if (lower.includes('—Å–∫–æ—Ä')) return 'üöë';
  if (lower.includes('–ø–æ–ª–∏–∫–ª–∏–Ω–∏–∫')) return 'üè•';
  if (lower.includes('—Ñ–∏—Ç–Ω–µ—Å')) return 'üèãÔ∏è';
  if (lower.includes('—Ç—Ä–µ–Ω–µ—Ä')) return 'ü•ã';
  if (lower.includes('–≤—Ä–∞—á')) return 'üë®üèª‚Äç‚öïÔ∏è';
  if (lower.includes('–º–µ–¥—Ü–µ–Ω—Ç—Ä')) return 'üè¨';
  if (lower.includes('–ª–µ—á–µ–Ω–∏–µ')) return 'üíâ';
  if (lower.includes('–æ—Ä–≥–∞–Ω')) return 'ü´Ä';
  if (lower.includes('–≥–µ–Ω–Ω—ã–µ')) return 'üß¨';
  if (lower.includes('—Å—Ç–∞—Ä–µ–Ω–∏—è')) return '‚è≥';
  if (lower.includes('–±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–µ —Ö–æ–¥—ã')) return '‚ôæÔ∏è';
  if (lower.includes('500 —Ö–æ–¥–æ–≤')) return 'üî¢';
  if (lower.includes('–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ')) return 'üíä';
  if (lower.includes('5000 –±–∞–∫—Å–æ–≤')) return 'ü™ô';
  if (lower.includes('15000')) return 'üíµ';
  if (lower.includes('150000 –±–∞–∫—Å–æ–≤')) return 'üí∞';
  if (lower.includes('2550000 –±–∞–∫—Å–æ–≤')) return 'üè¶';
  if (lower.includes('100000000 –±–∞–∫—Å–æ–≤')) return 'ü§ë';
  if (lower.includes('1500000000 –±–∞–∫—Å–æ–≤')) return 'üëë';
  if (lower.includes('—É–¥–≤–æ–∏—Ç—å –æ–±—ä–µ–º –∫–æ—à–µ–ª—å–∫–∞')) return 'üëù';
  if (lower.includes('—Ö10 –æ–±—ä–µ–º –∫–æ—à–µ–ª—å–∫–∞')) return 'üîü';
  if (lower.includes('–∫–æ—Ç–µ–Ω')) return 'üê±';
  if (lower.includes('—â–µ–Ω')) return 'üê∂';
  // --- –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç ---
  if (lower.includes('–±–æ—Å–∏–∫–æ–º')) return 'ü¶∂';
  if (lower.includes('–Ω–æ—Å–∫–∏')) return 'üß¶';
  if (lower.includes('—Ç–∞–ø–æ—á–∫–∏')) return 'ü•ø';
  if (lower.includes('–∫—Ä–æ—Å—Å–æ–≤–∫–∏')) return 'üëü';
  if (lower.includes('—Ç—É—Ñ–ª–∏')) return 'üëû';
  if (lower.includes('—Å–∫–µ–π—Ç')) return 'üõπ';
  if (lower.includes('–≤–µ–ª–æ—Å–∏–ø–µ–¥')) return 'üö≤';
  if (lower.includes('–º–æ–ø–µ–¥')) return 'üõµ';
  if (lower.includes('–∂–∏–≥—É–ª–∏')) return 'üöó';
  if (lower.includes('–∏–Ω–æ–º–∞—Ä–∫–∞')) return 'üöô';
  if (lower.includes('–ª—é–∫—Å–æ–≤—ã–π –∞–≤—Ç–æ')) return 'üöò';
  if (lower.includes('–≤–µ—Ä—Ç–æ–ª–µ—Ç')) return 'üöÅ';
  if (lower.includes('—Å–∞–º–æ–ª–µ—Ç')) return '‚úàÔ∏è';
  if (lower.includes('—à–∞—Ç—Ç–ª')) return 'üöÄ';
  if (lower.includes('—Ç–µ–ª–µ–ø–æ—Ä—Ç')) return 'üåÄ';
  // --- –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ ---
  if (lower.includes('–Ω–∞—É—á–∏—Ç—å—Å—è —á–∏—Ç–∞—Ç—å')) return 'üî§';
  if (lower.includes('3 –∫–ª–∞—Å—Å–∞')) return '3Ô∏è‚É£';
  if (lower.includes('9 –∫–ª–∞—Å—Å–æ–≤')) return '9Ô∏è‚É£';
  if (lower.includes('—Å—Ä–µ–¥–Ω–µ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ')) return 'üéì';
  if (lower.includes('–ø—Ç—É')) return 'üè≠';
  if (lower.includes('–≤—ã—Å—à–µ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ')) return 'üè´';
  if (lower.includes('–Ω–∞–Ω—è—Ç—å —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞')) return 'üë®‚Äçüè´';
  if (lower.includes('–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∑–∞ –≥—Ä–∞–Ω–∏—Ü–µ–π')) return 'üåç';
  if (lower.includes('–∞–∫–∞–¥–µ–º–∏–∫')) return 'üßë‚Äçüî¨';
  if (lower.includes('–∑–∞–Ω–∏–º–∞—Ç—å—Å—è —Å –ø—Ä–æ—Ñ–µ—Å—Å–æ—Ä–æ–º')) return 'üë®‚Äçüéì';
  if (lower.includes('–¥–æ–∫—Ç–æ—Ä –Ω–∞—É–∫')) return 'üë©‚Äçüî¨';
  if (lower.includes('–∫—É–ø–∏—Ç—å —Å–µ–±–µ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—é')) return 'üß™';
  if (lower.includes('–Ω–æ–±–µ–ª–µ–≤—Å–∫–∞—è –ø—Ä–µ–º–∏—è')) return 'üèÖ';
  if (lower.includes('–≤–∂–∏–≤–∏—Ç—å –≤ –º–æ–∑–≥ –∫–æ–º–ø—å—é—Ç–µ—Ä')) return 'üß†';
  if (lower.includes('–æ—Ü–∏—Ñ—Ä–æ–≤–∞—Ç—å —Å–æ–∑–Ω–∞–Ω–∏–µ')) return 'üíæ';
  // --- –ê–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—ã ---
  if (lower.includes('–Ω–∞ –¥–µ—Ä–µ–≤–µ')) return 'üå≥';
  if (lower.includes('–º—É—Å–æ—Ä–Ω—ã–π –±–∞–∫')) return 'üóëÔ∏è';
  if (lower.includes('–∫–æ—Ä–æ–±–∫–∞')) return 'üì¶';
  if (lower.includes('—à–∞–ª–∞—à')) return '‚õ∫';
  if (lower.includes('–ø–æ–¥–≤–∞–ª')) return 'üö™';
  if (lower.includes('—á–µ—Ä–¥–∞–∫')) return 'üèöÔ∏è';
  if (lower.includes('–∞—Ä–µ–Ω–¥–∞ –∫–æ–º–Ω–∞—Ç—ã')) return 'üõèÔ∏è';
  if (lower.includes('–∞—Ä–µ–Ω–¥–∞ –∫–≤–∞—Ä—Ç–∏—Ä—ã')) return 'üîë';
  if (lower.includes('–∫–≤–∞—Ä—Ç–∏—Ä–∞')) return 'üè¢';
  if (lower.includes('–ø–µ–Ω—Ç—Ö–∞—É—Å')) return 'üåá';
  if (lower.includes('–∫–æ—Ç—Ç–µ–¥–∂')) return 'üè°';
  if (lower.includes('–Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å –∑–∞ –≥—Ä–∞–Ω–∏—Ü–µ–π')) return 'üèõÔ∏è';
  if (lower.includes('—Å–≤–æ—è –≥–æ—Å—Ç–∏–Ω–Ω–∏—Ü–∞')) return 'üè®';
  if (lower.includes('—Å–≤–æ–π –æ—Å—Ç—Ä–æ–≤')) return 'üèùÔ∏è';
  if (lower.includes('–±–µ–ª—ã–π –¥–æ–º')) return 'üè∞';
  // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
  return null;
};

const EffectIcon = ({ type }) => (
  <span style={{ display: 'inline-block', width: 32, height: 32, verticalAlign: 'baseline', fontSize: 25 }}>
    {type === 'food' ? 'üçó' : type === 'health' ? '‚ù§Ô∏è' : type === 'fun' ? 'üéâ' : null}
  </span>
);

const EffectLottie = React.forwardRef(({ type, onComplete }, ref) => {
  let animationData;
  if (type === 'food') animationData = foodAnimation;
  if (type === 'fun') animationData = funAnimation;
  if (type === 'health') animationData = heartAnimation;
  return (
    <span style={{ display: 'inline-block', width: 32, height: 32, verticalAlign: 'baseline' }}>
      <Lottie
        lottieRef={ref}
        animationData={animationData}
        style={{ width: '100%', height: '100%' }}
        loop={false}
        autoplay
        onComplete={onComplete}
      />
    </span>
  );
});

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–¥–Ω–æ–π –∑–∞–¥–∞—á–∏
const TaskSection = ({
  taskKey,
  taskData,
  indicatorDeductions,
  afterTaskAction,
  isPurchased = false,
  onPurchase,
  mode = 'action',
  purchasedItems = {},
}) => {
  const {
    title,
    effects,
    initialPrice,
    currency,
    icon,
    additionalIcon,
    requiredLevel,
  } = taskData;

  const dispatch = useDispatch();
  const level = useSelector((state) => state.level.level);
  const balance = useSelector((state) => state.balance); // –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const location = useLocation();
  const wasMountedRef = useRef(false);
  const justUnlockedTaskKey = useSelector(state => state.level.justUnlockedTaskKey);
  const indicators = useSelector((state) => state.indicators);
  const editMode = useSelector(state => state.editMode.enabled);
  const selectedComponent = useSelector(state => state.editMode.selectedComponent);
  const customColors = useSelector(state => state.customColors);

  const isTaskUnlocked = level >= requiredLevel; // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏ –∑–∞–¥–∞—á–∞

  const [isButtonDisabled, setIsButtonDisabled] = useState(false);
  const [isTaskActive, setIsTaskActive] = useState(false);
  const [isTextVisible, setIsTextVisible] = useState(false);
  const [isOverflow, setIsOverflow] = useState(false);
  const [fontSize, setFontSize] = useState(1); // –ù–∞—á–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞
  const hasAdjustedFontSize = useRef(false); // –ß—Ç–æ–±—ã –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–µ —Ü–∏–∫–ª—ã

  const titleRef = useRef(null);
  // refs –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–π —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ (—Å–æ–∑–¥–∞—ë–º useMemo —á—Ç–æ–±—ã –Ω–µ —Ç–µ—Ä—è—Ç—å —Å—Å—ã–ª–∫–∏ –º–µ–∂–¥—É —Ä–µ–Ω–¥–µ—Ä–∞–º–∏)
  const effectKeys = effects ? Object.keys(effects) : [];
  const effectRefs = useMemo(() => {
    const refs = {};
    effectKeys.forEach(key => {
      refs[key] = React.createRef();
    });
    return refs;
  }, [JSON.stringify(effectKeys)]);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ (–æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
  useLayoutEffect(() => {
    if (titleRef.current && !hasAdjustedFontSize.current) {
      let currentFontSize = fontSize;
      const minFontSize = 0.3; // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞
      const titleElement = titleRef.current;

      const adjustFontSize = () => {
        const isOverflown = titleElement.scrollHeight > titleElement.clientHeight || titleElement.scrollWidth > titleElement.clientWidth;
        if (isOverflown && currentFontSize > minFontSize) {
          currentFontSize -= 0.05;
          setFontSize(currentFontSize);
        } else {
          hasAdjustedFontSize.current = true;
        }
      };

      adjustFontSize();
    }
  }, [title, fontSize]);

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—á–µ—Ä–µ–¥–∏ –∞–Ω–∏–º–∞—Ü–∏–π —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
  const [isEffectPlaying, setIsEffectPlaying] = useState({});
  const [pendingEffect, setPendingEffect] = useState({});

  const [isStarPlaying, setIsStarPlaying] = useState(false);
  const starLottieRef = useRef(null);

  const [isUnlocking, setIsUnlocking] = useState(false);
  const overlayTextRef = useRef(null);
  const [isTaskJustUnlocked, setIsTaskJustUnlocked] = useState(false);

  const [activeEffectKey, setActiveEffectKey] = useState(null); // –ö–∞–∫–æ–π —ç—Ñ—Ñ–µ–∫—Ç —Å–µ–π—á–∞—Å –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–µ—Ç—Å—è (food, fun, health)

  const isLongTitle = title && title.length > 1;

  useEffect(() => {
    if (!wasMountedRef.current) {
      wasMountedRef.current = true;
      // –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ —É–∂–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞, –Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–æ–ª—å–∫–æ —á—Ç–æ –∑–∞—à–µ–ª –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É ‚Äî –ø—Ä–æ—Å—Ç–æ –æ—Ç–º–µ—á–∞–µ–º –∫–∞–∫ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—É—é –±–µ–∑ –∞–Ω–∏–º–∞—Ü–∏–∏
      if (isTaskUnlocked && isTaskJustUnlocked) {
        setIsUnlocking(false);
      }
    }
  }, [location.pathname]);

  useEffect(() => {
    if (isTaskUnlocked && !isTaskJustUnlocked) {
      setIsTaskJustUnlocked(true);
      dispatch(setJustUnlockedTaskKey(taskKey));
    }
    if (!isTaskUnlocked) {
      setIsTaskJustUnlocked(false);
    }
  }, [isTaskUnlocked, taskKey, dispatch]);

  useEffect(() => {
    if (isTaskJustUnlocked && justUnlockedTaskKey === taskKey && wasMountedRef.current) {
      setIsUnlocking(false);
      dispatch(setJustUnlockedTaskKey(null));
    }
  }, [isTaskJustUnlocked, justUnlockedTaskKey, taskKey, dispatch]);

  const handleTaskAction = () => {
    if (mode === 'purchase' && isPurchased) return;
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
    if (balance[currency] < initialPrice) {
      message.error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –í—Ä–µ–º—è —Ç–æ—Ä–≥–æ–≤–ª–∏!');
      return;
    }

    setIsButtonDisabled(true);
    setIsTaskActive(true);

    // --- –õ–æ–≥–∏–∫–∞ –¥–ª—è mode='action' ---
    if (mode === 'action') {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –Ω–∞ –Ω—É–ª–µ
      const zeroKeys = [];
      if (indicators.health === 0) zeroKeys.push('health');
      if (indicators.fun === 0) zeroKeys.push('fun');
      if (indicators.food === 0) zeroKeys.push('food');
      // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫–∏ –¥–ª—è –Ω—É–ª–µ–≤—ã—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
      zeroKeys.forEach(key => {
        let nextStep = 0;
        if (key === 'health') nextStep = indicators.healthZeroSteps + 1;
        if (key === 'fun') nextStep = indicators.funZeroSteps + 1;
        if (key === 'food') nextStep = indicators.foodZeroSteps + 1;
        dispatch(increaseZeroStep(key));
        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ö–æ–¥–∞—Ö
        if (nextStep === 1) message.warning('–û—Å—Ç–∞–ª–æ—Å—å 3 —Ö–æ–¥–∞ –¥–æ –æ–±–Ω—É–ª–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è!');
        if (nextStep === 2) message.warning('–û—Å—Ç–∞–ª–æ—Å—å 2 —Ö–æ–¥–∞ –¥–æ –æ–±–Ω—É–ª–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è!');
        if (nextStep === 3) message.warning('–û—Å—Ç–∞–ª—Å—è 1 —Ö–æ–¥ –¥–æ –æ–±–Ω—É–ª–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è!');
        // –ï—Å–ª–∏ —Å—á—ë—Ç—á–∏–∫ –¥–æ—Å—Ç–∏–≥ 4 ‚Äî —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å
        if (nextStep >= 4) {
          dispatch(resetLevel());
          dispatch(resetZeroStep('health'));
          dispatch(resetZeroStep('fun'));
          dispatch(resetZeroStep('food'));
          message.error('–í–∞—à —É—Ä–æ–≤–µ–Ω—å –æ–±–Ω—É–ª—ë–Ω –∏–∑-–∑–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π!');
        }
      });
    }

    // –ï—Å–ª–∏ –µ—Å—Ç—å —ç—Ñ—Ñ–µ–∫—Ç—ã ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º Lottie —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞
    if (effects && Object.keys(effects).length > 0) {
      const firstKey = Object.keys(effects)[0];
      setActiveEffectKey(firstKey);
    }

    // --- –ë–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞ —Å—Ä–∞–∑—É! ---
    if (initialPrice > 0) {
      switch (currency) {
        case 'btc':
          dispatch(decreaseBTC(initialPrice));
          break;
        case 'hbtrd':
          dispatch(decreaseHBTRD(initialPrice));
          break;
        case 'usdt':
        default:
          dispatch(decreaseUSDT(initialPrice));
          break;
      }
    }

    // --- –õ–æ–≥–∏–∫–∞ —Å–±—Ä–æ—Å–∞ —Å—á—ë—Ç—á–∏–∫–æ–≤ –ø—Ä–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ ---
    if (mode === 'action') {
      if (effects.health && effects.health > 0) dispatch(resetZeroStep('health'));
      if (effects.fun && effects.fun > 0) dispatch(resetZeroStep('fun'));
      if (effects.food && effects.food > 0) dispatch(resetZeroStep('food'));
    }

    if (effects.health) {
      dispatch(increaseHealth(effects.health));
      dispatch(setLastChangedIndicator('health'));
    }
    if (effects.fun) {
      dispatch(increaseFun(effects.fun));
      dispatch(setLastChangedIndicator('fun'));
    }
    if (effects.food) {
      dispatch(increaseFood(effects.food));
      dispatch(setLastChangedIndicator('food'));
    }

    if (indicatorDeductions) {
      Object.entries(indicatorDeductions).forEach(
        ([indicator, deduction]) => {
          switch (indicator) {
            case 'health':
              dispatch(decreaseHealth(deduction));
              break;
            case 'fun':
              dispatch(decreaseFun(deduction));
              break;
            case 'food':
              dispatch(decreaseFood(deduction));
              break;
            default:
              break;
          }
        }
      );
    }

    dispatch(increaseLevel(1));

    if (afterTaskAction && typeof afterTaskAction === 'function') {
      afterTaskAction();
    }

    if (mode === 'purchase' && onPurchase) onPurchase();

    // UI-—Å–±—Ä–æ—Å —á–µ—Ä–µ–∑ –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–∞–π–º–µ—Ä (isTaskActive —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–∫–∏)
    setTimeout(() => {
      setIsButtonDisabled(false);
      setIsTaskActive(false); // UI –º–æ–∂–µ—Ç —Å—Ç–∞—Ç—å –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º, –Ω–æ –∞–Ω–∏–º–∞—Ü–∏—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç –ø—Ä–æ–∏–≥—Ä—ã–≤–∞—Ç—å—Å—è
      setIsTextVisible(false);
      // setActiveEffectKey(null); // –≤–æ–∑–≤—Ä–∞—Ç –∫ SVG —Ç–æ–ª—å–∫–æ –ø–æ onComplete
    }, 300); // –ú–æ–∂–Ω–æ —É–º–µ–Ω—å—à–∏—Ç—å –∑–∞–¥–µ—Ä–∂–∫—É, —á—Ç–æ–±—ã UI –±—ã—Å—Ç—Ä–µ–µ –≤–æ–∑–≤—Ä–∞—â–∞–ª—Å—è, –∞ –∞–Ω–∏–º–∞—Ü–∏—è –¥–æ–∏–≥—Ä—ã–≤–∞–ª–∞
  };

  const handleEditSelect = (key) => {
    dispatch(selectComponent(key));
  };

  // –ü–æ–ª—É—á–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ —Ü–≤–µ—Ç–∞ –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤
  const colorBg = isTaskUnlocked ? customColors['task_unlocked_background'] : customColors[`${taskKey}_background`];
  const colorIcon = isTaskUnlocked ? customColors['task_unlocked_icon'] : customColors[`${taskKey}_icon`];
  const colorText = isTaskUnlocked ? customColors['task_unlocked_text'] : customColors[`${taskKey}_text`];
  const colorButton = isTaskUnlocked ? customColors['task_unlocked_button'] : customColors[`${taskKey}_button`];
  const colorSubContainerBackground = isTaskUnlocked ? customColors['task_unlocked_subContainerBackground'] : customColors[`${taskKey}_subContainerBackground`];
  const colorSubContainerText = isTaskUnlocked ? customColors['task_unlocked_subContainerText'] : customColors[`${taskKey}_subContainerText`];
  const colorEffectBackground = isTaskUnlocked ? customColors['task_unlocked_effectBackground'] : customColors[`${taskKey}_effectBackground`];
  const colorButtonShadow = isTaskUnlocked ? customColors['task_unlocked_buttonShadow'] : customColors[`${taskKey}_buttonShadow`];

  return (
    <>
      <TaskSectionContainer
        isTaskUnlocked={isTaskUnlocked}
        justUnlockedTaskKey={justUnlockedTaskKey}
        taskKey={taskKey}
        isUnlocking={isUnlocking}
        isStarPlaying={isStarPlaying}
        onOverlayClick={() => {
          if (starLottieRef.current && !isStarPlaying && !isUnlocking) {
            setIsStarPlaying(true);
            starLottieRef.current.stop();
            starLottieRef.current.play();
          }
        }}
        overlayTextRef={overlayTextRef}
        starLottieRef={starLottieRef}
        requiredLevel={requiredLevel}
        style={{
          ...(colorBg ? { background: colorBg } : {}),
        }}
        iconContainer={
          <IconContainer style={colorIcon ? { background: colorIcon } : {}}>
            {getTaskEmoji(title) ? (
              <span style={{ fontSize: '2rem' }}>{getTaskEmoji(title)}</span>
            ) : (
              icon
            )}
          </IconContainer>
        }
        taskInfo={
          <TaskInfo>
            <TaskTitleWrapper>
              <TaskTitle ref={titleRef} isOverflow={isOverflow} fontSize={fontSize} style={colorText ? { color: colorText } : {}}>
                {title}
              </TaskTitle>
            </TaskTitleWrapper>
          </TaskInfo>
        }
        effects={effects}
        requirements={taskData.requirements}
        purchasedItems={purchasedItems}
        colorEffectBackground={colorEffectBackground}
        colorSubContainerText={colorSubContainerText}
        actionButton={
          mode === 'purchase' ? (
            <ActionButton
              type="primary"
              onClick={handleTaskAction}
              disabled={isButtonDisabled || !isTaskUnlocked || isPurchased}
              style={{
                ...(isPurchased ? { background: '#d9d9d9', color: '#888', border: 'none', cursor: 'default', boxShadow: 'none' } : {}),
                ...(colorButton ? { background: colorButton, border: 'none' } : {}),
                ...(colorButtonShadow ? { boxShadow: `0 0 16px 0 ${colorButtonShadow}` } : {}),
              }}
            >
              {isPurchased
                ? '–ö—É–ø–ª–µ–Ω–æ'
                : initialPrice > 0
                  ? <><span style={{fontSize: '0.65rem', marginRight: 4}}></span>{formatBalance(initialPrice, currency)}</>
                  : <span style={{whiteSpace: 'nowrap', fontSize: '0.65rem', wordBreak: 'break-all', textAlign: 'center'}}>–ö—É–ø–∏—Ç—å</span>}
            </ActionButton>
          ) : (
            <ActionButton
              type="primary"
              onClick={handleTaskAction}
              disabled={isButtonDisabled || !isTaskUnlocked}
              style={colorButton ? { background: colorButton, border: 'none', ...(colorButtonShadow ? { boxShadow: `0 0 16px 0 ${colorButtonShadow}` } : {}) } : (colorButtonShadow ? { boxShadow: `0 0 16px 0 ${colorButtonShadow}` } : {})}
            >
              {initialPrice > 0 ? `${formatBalance(initialPrice, currency)}` : '–°–¥–µ–ª–∞—Ç—å'}
            </ActionButton>
          )
        }
        isEditMode={editMode}
        isSelected={selectedComponent === taskKey}
        onEditSelect={handleEditSelect}
        isLongTitle={isLongTitle}
        title={typeof title === 'string' ? title : String(title)}
      >
        {/* Lottie –¥–ª—è Overlay (children) */}
        <Lottie
          lottieRef={starLottieRef}
          animationData={starAnimation}
          loop={false}
          autoplay={false}
          style={{ width: '100%', height: '100%' }}
          onComplete={() => setIsStarPlaying(false)}
        />
      </TaskSectionContainer>
      {editMode && selectedComponent === taskKey && (
        <ModalColorPicker
          componentKey={isTaskUnlocked ? 'task_unlocked' : 'lockedTask'}
          onClose={() => dispatch(selectComponent(null))}
        />
      )}
    </>
  );
};

export default TaskSection;