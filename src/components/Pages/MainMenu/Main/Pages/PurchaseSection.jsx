// PurchaseSection.jsx
import React from 'react';
import { Card, message } from 'antd';
import styled from 'styled-components';
import { DollarOutlined, LockOutlined } from '@ant-design/icons';
import { FaStar } from 'react-icons/fa';
import { useDispatch, useSelector } from 'react-redux';
import { decreaseUSDT, decreaseBTC, decreaseHBTRD } from '@/store/slices/balanceSlice';
import PurchaseButton from './PurchaseButton';

const { Meta } = Card;

// –°—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –æ–≤–µ—Ä–ª–µ–π –¥–ª—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ (–µ—Å–ª–∏ —É—Ä–æ–≤–µ–Ω—å –Ω–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç)
const Overlay = styled.div`
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(0,0,0,0.5);
  display: flex;
  justify-content: center;
  align-items: center;
  border-radius: 8px;
  z-index: 1;
`;

// –°—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –æ–≤–µ—Ä–ª–µ—è (–∑–∞–º–æ—á–µ–∫ –∏ —É—Ä–æ–≤–µ–Ω—å)
const OverlayText = styled.div`
  color: #fff;
  font-size: 1rem;
  display: flex;
  align-items: center;

  svg {
    margin-left: 4px;
    color: gold;
  }
`;

// –°—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º, —Ç–µ–Ω—å—é –∏ –ø–ª–∞–≤–Ω–æ–π –∞–Ω–∏–º–∞—Ü–∏–µ–π
const StyledCard = styled(Card)`
  width: 100%;
  max-width: 300px;
  position: relative;
  opacity: ${({ $locked }) => ($locked ? 0.6 : 1)};
  background: linear-gradient(135deg, #e0e7ff 0%, #f0fdfa 100%);
  box-shadow: 0 8px 32px 0 rgba(31, 38, 135, 0.15);
  border-radius: 18px;
  transition: transform 0.2s, box-shadow 0.2s;
  overflow: hidden;
  border: none;

  &:hover {
    transform: scale(1.03);
    box-shadow: 0 12px 40px 0 rgba(31, 38, 135, 0.22);
  }
`;

// –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Å–µ–∫—Ü–∏–∏ –ø–æ–∫—É–ø–∫–∏
const PurchaseSection = ({ itemKey, itemData, isPurchased, onPurchase }) => {
  const dispatch = useDispatch();
  const level = useSelector((state) => state.level.level); // –ü–æ–ª—É—á–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –∏–≥—Ä–æ–∫–∞ –∏–∑ Redux
  const balance = useSelector((state) => state.balance);   // –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –∏–≥—Ä–æ–∫–∞ –∏–∑ Redux

  // –î–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Ç–æ–≤–∞—Ä–µ
  const { image, title, description, price, displayPrice, currency, requiredLevel } = itemData;

  // –ü—Ä–æ–≤–µ—Ä–∫–∞, –æ—Ç–∫—Ä—ã—Ç –ª–∏ —Ç–æ–≤–∞—Ä –ø–æ —É—Ä–æ–≤–Ω—é
  const isLocked = level < requiredLevel;

  // –§—É–Ω–∫—Ü–∏—è –ø–æ–∫—É–ø–∫–∏
  const handlePurchase = () => {
    if (balance[currency] < price) {
      message.error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!');
      return;
    }

    // –£–º–µ–Ω—å—à–∞–µ–º –±–∞–ª–∞–Ω—Å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–∞–ª—é—Ç—ã
    switch (currency) {
      case 'btc':
        dispatch(decreaseBTC(price));
        break;
      case 'hbtrd':
        dispatch(decreaseHBTRD(price));
        break;
      case 'usdt':
      default:
        dispatch(decreaseUSDT(price));
        break;
    }

    onPurchase(itemKey); // –û—Ç–º–µ—á–∞–µ–º —Ç–æ–≤–∞—Ä –∫–∞–∫ –∫—É–ø–ª–µ–Ω–Ω—ã–π
    message.success('–ü–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–≤–µ—Ä—à–µ–Ω–∞!');
  };

  return (
    <StyledCard
      $locked={isLocked}
      cover={
        <img
          alt={title}
          src={image}
          style={{
            height: '220px',
            objectFit: 'cover',
            borderRadius: '18px 18px 0 0'
          }}
        />
      }
      actions={[
        <PurchaseButton
          type="primary"
          onClick={handlePurchase}
          disabled={isPurchased || isLocked}
          $isInactive={isPurchased}
        >
          {isLocked ? (
            <>
              <LockOutlined style={{ marginRight: '8px' }} />
              {`–£—Ä–æ–≤–µ–Ω—å ${requiredLevel}`}
            </>
          ) : (
            <>
              {isPurchased ? '–ö—É–ø–ª–µ–Ω–æ' : displayPrice}
              {/* {!isPurchased && <DollarOutlined style={{ marginLeft: '8px' }} />} */}
            </>
          )}
        </PurchaseButton>,
      ]}
    >
      {/* –û–≤–µ—Ä–ª–µ–π, –µ—Å–ª–∏ –∫–∞—Ä—Ç–æ—á–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –ø–æ —É—Ä–æ–≤–Ω—é */}
      {isLocked && (
        <Overlay>
          <OverlayText>
            <LockOutlined style={{ marginRight: '8px' }} />
            {requiredLevel} <FaStar />
          </OverlayText>
        </Overlay>
      )}
      {/* –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ */}
      <Meta title={title} description={description} />
      {/* –ë–ª–æ–∫ —Å —ç—Ñ—Ñ–µ–∫—Ç–∞–º–∏ (–µ–¥–∞, –∑–¥–æ—Ä–æ–≤—å–µ, –≤–µ—Å–µ–ª—å–µ) */}
      <div style={{ display: 'flex', gap: '12px', margin: '12px 0 0 0' }}>
        {itemData.effects && Object.entries(itemData.effects).map(([key, value]) => (
          <div key={key} style={{
            background: '#f0fdfa',
            borderRadius: '8px',
            padding: '4px 10px',
            fontSize: '0.95rem',
            color: '#4096ff',
            fontWeight: 600,
            boxShadow: '0 2px 8px rgba(64,150,255,0.07)'
          }}>
            {key === 'food' && 'üçó'}
            {key === 'health' && '‚ù§Ô∏è'}
            {key === 'fun' && 'üéâ'}
            +{value}
          </div>
        ))}
      </div>
    </StyledCard>
  );
};

export default PurchaseSection;
